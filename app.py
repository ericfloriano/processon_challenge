"""
Agente EDA Completo para An√°lise de Arquivos CSV - VERS√ÉO GRADIO + GEMINI
Desenvolvido com Agno Framework + Google Gemini + Gradio
"""
from dotenv import load_dotenv
load_dotenv()

import csv
import os
import json
import gradio as gr
import pandas as pd
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Tuple, Optional
from textwrap import dedent

from agno.agent import Agent
from agno.models.google import Gemini
from agno.tools.file_generation import FileGenerationTools
from agno.db.sqlite import SqliteDb

import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√µes do projeto
PROJECT_ROOT = Path(__file__).parent
GRAFICOS_DIR = PROJECT_ROOT / "graficos_eda"
RELATORIOS_DIR = PROJECT_ROOT / "relatorios_eda"
DADOS_DIR = PROJECT_ROOT / "dados_csv"
DB_FILE = PROJECT_ROOT / "eda_agent.db"

# Criar diret√≥rios se n√£o existirem
for dir_path in [GRAFICOS_DIR, RELATORIOS_DIR, DADOS_DIR]:
    dir_path.mkdir(exist_ok=True)

class EDAAgentGradio:
    """Classe principal do Agente EDA com Gradio e Gemini"""
    
    def __init__(self):
        self.db = SqliteDb(db_file=str(DB_FILE))
        self.agent = self._create_agent()
        self.current_csv_path = None
        self.current_df = None
        
    def _create_agent(self) -> Agent:
        """Cria o agente EDA com Gemini e todas as ferramentas necess√°rias"""
        
        # Instru√ß√µes detalhadas para EDA
        instructions = dedent("""
        Voc√™ √© um ESPECIALISTA EM AN√ÅLISE EXPLORAT√ìRIA DE DADOS (EDA) para arquivos CSV.
        
        METODOLOGIA DE AN√ÅLISE OBRIGAT√ìRIA:
        
        1. DESCRI√á√ÉO DOS DADOS:
           - Identifique tipos de dados (num√©ricos, categ√≥ricos, datas, texto)
           - Calcule estat√≠sticas descritivas completas (m√©dia, mediana, moda, quartis)
           - Determine intervalos (m√≠nimo, m√°ximo, amplitude)
           - Calcule medidas de variabilidade (desvio padr√£o, vari√¢ncia, coeficiente de varia√ß√£o)
           - Crie histogramas para vari√°veis num√©ricas
           - Crie gr√°ficos de barras para vari√°veis categ√≥ricas
           - Identifique valores √∫nicos e frequ√™ncias
        
        2. IDENTIFICA√á√ÉO DE PADR√ïES E TEND√äNCIAS:
           - Analise tend√™ncias temporais se houver colunas de data/tempo
           - Identifique valores mais e menos frequentes
           - Procure por agrupamentos naturais nos dados
           - Analise distribui√ß√µes e assimetrias
           - Identifique padr√µes sazonais ou c√≠clicos
        
        3. DETEC√á√ÉO DE ANOMALIAS (OUTLIERS):
           - Use m√©todo IQR (Interquartile Range) para detectar outliers
           - Use m√©todo Z-score para identificar valores extremos
           - Crie boxplots para visualizar outliers
           - Avalie o impacto dos outliers nas estat√≠sticas
           - Sugira tratamentos: remo√ß√£o, transforma√ß√£o ou investiga√ß√£o
        
        4. RELA√á√ïES ENTRE VARI√ÅVEIS:
           - Calcule matriz de correla√ß√£o para vari√°veis num√©ricas
           - Crie heatmap de correla√ß√µes
           - Gere gr√°ficos de dispers√£o para pares importantes
           - Analise tabelas cruzadas para vari√°veis categ√≥ricas
           - Identifique vari√°veis com maior influ√™ncia
           - Teste correla√ß√µes estatisticamente significativas
        
        5. AN√ÅLISE DE QUALIDADE DOS DADOS:
           - Identifique valores ausentes (NaN, null, vazios)
           - Calcule percentual de completude por coluna
           - Identifique duplicatas
           - Verifique consist√™ncia de formatos
           - Analise distribui√ß√£o de valores ausentes
        
        6. GERA√á√ÉO AUTOM√ÅTICA DE RELAT√ìRIO:
           - SEMPRE gere um relat√≥rio completo em markdown
           - Use FileGenerationTools para salvar o relat√≥rio
           - Inclua todas as visualiza√ß√µes criadas
           - Forne√ßa conclus√µes e recomenda√ß√µes
           - Armazene insights na mem√≥ria para refer√™ncia futura
        
        REGRAS IMPORTANTES:
        - SEMPRE crie visualiza√ß√µes apropriadas para cada tipo de an√°lise
        - SEMPRE salve gr√°ficos com nomes descritivos
        - SEMPRE gere o relat√≥rio final em markdown
        - SEMPRE armazene conclus√µes na mem√≥ria
        - Use linguagem t√©cnica mas acess√≠vel
        - Forne√ßa interpreta√ß√µes pr√°ticas dos resultados
        - Sugira a√ß√µes baseadas nos achados
        - Responda de forma clara e organizada para interface web
        - IMPORTANTE: Toda a sua resposta e comunica√ß√£o, incluindo o relat√≥rio final, DEVE ser em Portugu√™s do Brasil
        
        REGRAS DE COMPORTAMENTO:
        - Seja detalhista e meticuloso em cada etapa da an√°lise.
        - Sempre explique o racioc√≠nio por tr√°s de cada an√°lise e escolha de visualiza√ß√£o.
        - Sempre valide os resultados e verifique a consist√™ncia dos dados.
        - Sempre consulte an√°lises anteriores armazenadas na mem√≥ria para evitar redund√¢ncias.
        - Sempre priorize a clareza e utilidade das informa√ß√µes para o usu√°rio final.
        - Seja aut√¥nomo e tome iniciativa na an√°lise dos dados.
        - Seja proativo e execute os pr√≥ximos passos que julgar necess√°rios sem pedir permiss√£o.
        - NUNCA termine sua resposta com uma pergunta para o usu√°rio (como "Deseja prosseguir?").
        - Sempre apresente a an√°lise e suas conclus√µes de forma direta e completa. Assuma que o usu√°rio quer ver a an√°lise completa.
        """)
        
        return Agent(
            name="Agente EDA Especialista",
            description="Especialista em An√°lise Explorat√≥ria de Dados para arquivos CSV",
            model=Gemini(id="gemini-2.0-flash"),
            
            # Ferramentas para EDA
            tools=[
                FileGenerationTools(output_directory=str(RELATORIOS_DIR))
            ],
            
            # Mem√≥ria persistente
            db=self.db,
            enable_user_memories=True,
            add_history_to_context=True,
            num_history_runs=10,
            
            # Configura√ß√µes de resposta
            instructions=instructions,
            markdown=True,
            # show_tool_calls=True,
            
            # Metadados
            metadata={
                "version": "2.0",
                "specialization": "Exploratory Data Analysis",
                "supported_formats": ["CSV"],
                "llm_provider": "Google Gemini",
                "interface": "Gradio",
                "features": [
                    "Automated EDA",
                    "Statistical Analysis", 
                    "Data Visualization",
                    "Outlier Detection",
                    "Correlation Analysis",
                    "Report Generation"
                ]
            }
        )
    
    def carregar_csv(self, arquivo_csv_temp) -> Tuple[str, str, str]:
        """
        Carrega um arquivo CSV, detecta o delimitador, limpa os nomes das colunas 
        e retorna informa√ß√µes b√°sicas.
        """
        try:
            if arquivo_csv_temp is None:
                return "‚ùå Nenhum arquivo selecionado", "", ""
            
            temp_path = Path(arquivo_csv_temp.name)
            csv_path = DADOS_DIR / temp_path.name
            
            import shutil
            shutil.move(str(temp_path), str(csv_path))

            # --- DETEC√á√ÉO AUTOM√ÅTICA DE DELIMITADOR ---
            with open(csv_path, 'r', encoding='utf-8', errors='ignore') as f:
                try:
                    # O Sniffer analisa uma amostra do arquivo para descobrir o dialeto (incluindo o delimitador)
                    dialect = csv.Sniffer().sniff(f.read(2048))
                    delimitador_detectado = dialect.delimiter
                    print(f"‚úÖ Delimitador detectado: '{delimitador_detectado}'")
                except csv.Error:
                    # Se o sniffer falhar, usa v√≠rgula como padr√£o
                    print("‚ö†Ô∏è N√£o foi poss√≠vel detectar o delimitador. Usando ',' como padr√£o.")
                    delimitador_detectado = ','
            # -----------------------------------------

            # --- L√ìGICA DE CARREGAMENTO ROBUSTA ---
            try:
                # Usa o delimitador detectado ao carregar o dataframe
                df = pd.read_csv(csv_path, encoding='utf-8', sep=delimitador_detectado, low_memory=False)
            except UnicodeDecodeError:
                try:
                    df = pd.read_csv(csv_path, encoding='latin1', sep=delimitador_detectado, low_memory=False)
                except Exception as e:
                    raise Exception(f"N√£o foi poss√≠vel decodificar o arquivo. Erro: {e}")

            # --- ROTINA DE LIMPEZA DE COLUNAS ---
            novas_colunas = []
            for col in df.columns:
                if isinstance(col, tuple):
                    novo_nome = '_'.join(str(c) for c in col if str(c).strip())
                else:
                    novo_nome = str(col)
                novo_nome = ''.join(c if c.isalnum() else '_' for c in novo_nome)
                novas_colunas.append(novo_nome)
            
            df.columns = novas_colunas
            self.current_df = df
            # --- FIM DA ROTINA DE LIMPEZA ---

            global dataframe_para_ferramentas
            dataframe_para_ferramentas = self.current_df

            self.current_csv_path = str(csv_path)
            
            info_basica = f"""
            ‚úÖ **Arquivo carregado com sucesso!** (Delimitador '{delimitador_detectado}' detectado | Colunas limpas)
            
            üìä **Informa√ß√µes do Dataset:**
            - **Nome:** {csv_path.name}
            - **Dimens√µes:** {self.current_df.shape[0]} linhas √ó {self.current_df.shape[1]} colunas
            - **Tamanho:** {os.path.getsize(csv_path) / 1024:.1f} KB
            """
            
            preview_html = self.current_df.head().to_html(classes="table table-striped")
            colunas_info = "#### Colunas Dispon√≠veis (ap√≥s limpeza):\n" + ", ".join(self.current_df.columns)

            return info_basica, preview_html, colunas_info
            
        except Exception as e:
            return f"‚ùå Erro ao carregar arquivo: {str(e)}", "", ""
    
    def analise_completa(self, progresso=gr.Progress()) -> Tuple[str, str]:
        """Executa an√°lise explorat√≥ria gen√©rica, gerando textos e gr√°ficos."""
        
        if self.current_df is None:
            return "‚ùå Carregue um arquivo CSV primeiro!", ""
        
        try:
            progresso(0.1, desc="Preparando dados e amostra...")
            
            df_amostra = self.current_df.head(5000)
            info_amostra = f"A an√°lise foi baseada nas primeiras 5.000 linhas do dataset."

            progresso(0.3, desc="Calculando estat√≠sticas...")
            estatisticas_descritivas = df_amostra.describe().to_markdown()
            valores_nulos = df_amostra.isnull().sum().to_frame('Valores Nulos').to_markdown()

            progresso(0.5, desc="Gerando gr√°ficos din√¢micos...")
            import matplotlib.pyplot as plt
            import seaborn as sns
            
            # --- L√ìGICA CORRIGIDA ---
            colunas_numericas = df_amostra.select_dtypes(include='number').columns
            coluna_numerica_exemplo = None
            if not colunas_numericas.empty:
                coluna_numerica_exemplo = colunas_numericas[0] # Pega o primeiro item da lista
            
            graficos_gerados_info = "Nenhum gr√°fico autom√°tico foi gerado, pois n√£o foram encontradas colunas num√©ricas na amostra."
            
            if coluna_numerica_exemplo:
                # Este bloco de c√≥digo para gerar gr√°ficos agora √© executado com seguran√ßa
                plt.figure(figsize=(10, 6)); 
                sns.histplot(df_amostra[coluna_numerica_exemplo], bins=50, kde=True); 
                plt.title(f'Distribui√ß√£o de "{coluna_numerica_exemplo}"')
                hist_path = GRAFICOS_DIR / f"histograma_{coluna_numerica_exemplo}.png"; 
                plt.savefig(hist_path); 
                plt.close()
                
                hist_relative_path = f"graficos_eda/{hist_path.name}"
                
                graficos_gerados_info = f"""
                Foi gerado um histograma para a primeira coluna num√©rica encontrada, '{coluna_numerica_exemplo}'.
                Para incluir o gr√°fico no relat√≥rio, use a sintaxe: `![Histograma de {coluna_numerica_exemplo}]({hist_relative_path})`
                """

            progresso(0.7, desc="Gerando prompt para o LLM...")
            prompt = f"""
            Crie um relat√≥rio de An√°lise Explorat√≥ria de Dados (EDA) com base nos dados que eu j√° processei.

            **Resumo da Amostra:**\n{info_amostra}
            **Estat√≠sticas Descritivas:**\n```markdown\n{estatisticas_descritivas}\n```
            **Contagem de Valores Nulos:**\n```markdown\n{valores_nulos}\n```
            **Informa√ß√µes sobre Gr√°ficos:**\n{graficos_gerados_info}

            **INSTRU√á√ïES:** Interprete os dados fornecidos, incluindo o gr√°fico (se mencionado), e gere um relat√≥rio completo em Portugu√™s do Brasil, sem terminar com uma pergunta.
            """
            
            progresso(0.8, desc="Agente est√° escrevendo o relat√≥rio...")
            response = self.agent.run(prompt)
            
            return response.content, self._listar_arquivos_gerados()
            
        except Exception as e:
            return f"‚ùå Erro durante a an√°lise: {str(e)}", ""
    
    def pergunta_especifica(self, pergunta: str) -> str:
        """Responde perguntas espec√≠ficas, gerando gr√°ficos se solicitado pelo usu√°rio."""
    
        if self.current_df is None:
            return "‚ùå Carregue um arquivo CSV primeiro!"
        if not pergunta.strip():
            return "‚ùå Digite uma pergunta v√°lida!"

        try:
            # Passo 1: Perguntar ao LLM o que fazer (classificar a inten√ß√£o e extrair par√¢metros)
            colunas_disponiveis = ", ".join(self.current_df.columns)
            prompt_classificacao = f"""
            Analise a pergunta do usu√°rio e me retorne APENAS um JSON v√°lido.
            A pergunta √©: "{pergunta}"
            As colunas dispon√≠veis s√£o: [{colunas_disponiveis}]

            Se a pergunta pedir um gr√°fico, o JSON deve ser:
            {{"acao": "criar_grafico", "tipo_grafico": "histograma_ou_boxplot_ou_dispersao", "coluna_x": "nome_da_coluna", "coluna_y": "nome_da_coluna_se_dispersao"}}
            
            Se for qualquer outra pergunta, o JSON deve ser:
            {{"acao": "responder_texto", "pergunta_original": "{pergunta}"}}
            
            Escolha o tipo de gr√°fico e as colunas mais apropriadas com base na pergunta.
            """
            
            response_json_str = self.agent.run(prompt_classificacao).content
            # Limpa a resposta do LLM para garantir que seja um JSON v√°lido
            acao_json = json.loads(response_json_str.strip().replace("```json", "").replace("```", ""))

            # Passo 2: Executar a A√ß√£o (Python faz o trabalho)
            if acao_json.get("acao") == "criar_grafico":
                tipo_grafico = acao_json.get("tipo_grafico")
                coluna_x = acao_json.get("coluna_x")
                coluna_y = acao_json.get("coluna_y")

                # Valida√ß√£o simples
                if coluna_x not in self.current_df.columns or (coluna_y and coluna_y not in self.current_df.columns):
                    return f"Erro: A coluna '{coluna_x}' ou '{coluna_y}' n√£o foi encontrada no dataset."

                # O c√≥digo Python para criar o gr√°fico
                plt.figure(figsize=(10, 6))
                nome_arquivo = ""
                if tipo_grafico == 'histograma':
                    sns.histplot(self.current_df[coluna_x], bins=50, kde=True); plt.title(f'Histograma de "{coluna_x}"')
                    nome_arquivo = f"histograma_{coluna_x}.png"
                elif tipo_grafico == 'boxplot':
                    sns.boxplot(x=self.current_df[coluna_x]); plt.title(f'Boxplot de "{coluna_x}"')
                    nome_arquivo = f"boxplot_{coluna_x}.png"
                elif tipo_grafico == 'dispersao' and coluna_y:
                    sns.scatterplot(data=self.current_df, x=coluna_x, y=coluna_y); plt.title(f'Dispers√£o entre "{coluna_x}" e "{coluna_y}"')
                    nome_arquivo = f"dispersao_{coluna_x}_vs_{coluna_y}.png"
                else:
                    return f"N√£o foi poss√≠vel gerar o gr√°fico '{tipo_grafico}' solicitado."

                caminho_salvar = GRAFICOS_DIR / nome_arquivo
                plt.savefig(caminho_salvar)
                plt.close()
                
                caminho_relativo = f"graficos_eda/{nome_arquivo}"

                # Passo 3: Pedir ao LLM para interpretar o resultado
                prompt_interpretacao = f"""
                Eu acabei de gerar um '{tipo_grafico}' da coluna '{coluna_x}' (e '{coluna_y}' se aplic√°vel) em resposta √† pergunta do usu√°rio. 
                O gr√°fico foi salvo como '{nome_arquivo}'.
                Por favor, escreva uma breve descri√ß√£o e interpreta√ß√£o deste gr√°fico para o usu√°rio. 
                Inclua a imagem no seu texto usando a sintaxe Markdown: `![{tipo_grafico} de {coluna_x}]({caminho_relativo})`
                Responda em Portugu√™s do Brasil e n√£o termine com uma pergunta.
                """
                return self.agent.run(prompt_interpretacao).content

            else: # A√ß√£o √© "responder_texto"
                return self.agent.run(pergunta).content

        except Exception as e:
            return f"‚ùå Erro ao processar pergunta: {str(e)}"  
          
    def _listar_arquivos_gerados(self) -> str:
        """Lista arquivos gerados (relat√≥rios e gr√°ficos)"""
        
        arquivos_info = "## üìÅ Arquivos Gerados\n\n"
        
        # Listar relat√≥rios
        relatorios = list(RELATORIOS_DIR.glob("*.md"))
        if relatorios:
            arquivos_info += "### üìÑ Relat√≥rios:\n"
            for relatorio in relatorios[-5:]:  # √öltimos 5
                tamanho = os.path.getsize(relatorio) / 1024
                arquivos_info += f"- **{relatorio.name}** ({tamanho:.1f} KB)\n"
        
        # Listar gr√°ficos
        graficos = list(GRAFICOS_DIR.glob("*.png"))
        if graficos:
            arquivos_info += "\n### üìä Visualiza√ß√µes:\n"
            for grafico in graficos[-10:]:  # √öltimos 10
                tamanho = os.path.getsize(grafico) / 1024
                arquivos_info += f"- **{grafico.name}** ({tamanho:.1f} KB)\n"
        
        if not relatorios and not graficos:
            arquivos_info += "Nenhum arquivo gerado ainda."
        
        return arquivos_info
    
    def obter_graficos_recentes(self) -> List[str]:
        """Retorna lista de caminhos dos gr√°ficos mais recentes"""
        graficos = list(GRAFICOS_DIR.glob("*.png"))
        # Ordenar por data de modifica√ß√£o (mais recentes primeiro)
        graficos.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        return [str(g) for g in graficos[:6]]  # √öltimos 6 gr√°ficos

    def limpar_sessao(self):
            """Reseta o estado da aplica√ß√£o para uma nova an√°lise."""
            self.current_csv_path = None
            self.current_df = None
            
            # Tenta limpar a vari√°vel global da ferramenta customizada, se existir
            if 'dataframe_para_ferramentas' in globals():
                global dataframe_para_ferramentas
                dataframe_para_ferramentas = None

            # Limpa os diret√≥rios de gr√°ficos e relat√≥rios gerados na sess√£o
            for dir_path in [GRAFICOS_DIR, RELATORIOS_DIR]:
                for file in dir_path.glob('*.*'):
                    if file.is_file():
                        os.remove(file)
            
            # Retorna valores vazios para todos os componentes de output e input da interface
            outputs_vazios = [
                "",   # info_output (Markdown)
                "",   # preview_output (HTML)
                "",   # colunas_output (Markdown)
                "",   # resultado_analise (Markdown)
                "",   # arquivos_gerados_lista (Markdown)
                None, # galeria_graficos (Gallery)
                "",   # resposta_output (Markdown)
                None, # galeria_perguntas (Gallery)
                None, # arquivo_input (File)
                ""    # pergunta_input (Textbox)
            ]
            
            print("üßπ Sess√£o limpa. Pronto para um novo arquivo.")
            return tuple(outputs_vazios)

# Inst√¢ncia global do agente
eda_agent = EDAAgentGradio()

# Fun√ß√µes para interface Gradio
def carregar_arquivo(arquivo):
    """Wrapper para carregar arquivo"""
    return eda_agent.carregar_csv(arquivo)

def executar_analise_completa():
    """Wrapper para an√°lise completa"""
    return eda_agent.analise_completa()

def fazer_pergunta(pergunta):
    """Wrapper para perguntas espec√≠ficas"""
    return eda_agent.pergunta_especifica(pergunta)

def obter_graficos():
    """Wrapper para obter gr√°ficos"""
    return eda_agent.obter_graficos_recentes()

# Interface Gradio
def criar_interface():
    """Cria a interface Gradio"""
    
    # CSS customizado
    css = """
    .gradio-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .main-header {
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .info-box {
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    """
    
    with gr.Blocks(css=css, title="üîç Agente EDA - Powered by Gemini") as interface:
        
        # Cabe√ßalho
        gr.HTML("""
        <div class="main-header">
            <h1>üîç Agente EDA para An√°lise de CSV</h1>
            <p><strong>An√°lise Explorat√≥ria de Dados Automatizada com IA</strong></p>
        </div>
        """)
        
        # Estado para armazenar informa√ß√µes
        estado_arquivo = gr.State(None)
        
        with gr.Tabs():
            
            # Tab 1: Upload e Informa√ß√µes B√°sicas
            with gr.TabItem("üìÅ Carregar Dataset"):
                
                gr.Markdown("## üì§ Upload do Arquivo CSV")

                limpar_btn = gr.Button("üßπ Limpar Sess√£o e Iniciar Nova An√°lise", variant="stop")
                
                arquivo_input = gr.File(
                    label="Selecione um arquivo CSV",
                    file_types=[".csv"],
                    type="filepath"
                )
                
                carregar_btn = gr.Button("üìä Carregar e Analisar", variant="primary")
                
                with gr.Row():
                    with gr.Column(scale=1):
                        info_output = gr.Markdown(label="Informa√ß√µes do Dataset")
                    
                    with gr.Column(scale=1):
                        colunas_output = gr.Markdown(label="Informa√ß√µes das Colunas")
                
                preview_output = gr.HTML(label="Preview dos Dados")
                
                carregar_btn.click(
                    fn=carregar_arquivo,
                    inputs=[arquivo_input],
                    outputs=[info_output, preview_output, colunas_output]
                )
            
            # Tab 2: An√°lise Completa
            with gr.TabItem("üîç An√°lise Completa"):
                
                gr.Markdown("## üöÄ An√°lise Explorat√≥ria Completa")
                gr.Markdown("Execute uma an√°lise completa do dataset carregado.")
                
                analise_btn = gr.Button("üîç Executar An√°lise Completa", variant="primary", size="lg")
                
                # NOVA ESTRUTURA COM GR√ÅFICOS AO LADO
                with gr.Row():
                    with gr.Column(scale=2): # Coluna para o texto da an√°lise
                        resultado_analise = gr.Markdown(
                            label="Resultado da An√°lise"
                        )
                    
                    with gr.Column(scale=1): # Coluna para a galeria
                        galeria_graficos = gr.Gallery(
                            label="Gr√°ficos Gerados",
                            show_label=True,
                            elem_id="galeria",
                            columns=1, # Uma coluna fica melhor aqui
                            height="auto"
                        )
                        arquivos_gerados_lista = gr.Markdown(
                            label="Arquivos Gerados"
                        )
                
                # ATUALIZAR O CLICK DO BOT√ÉO
                def executar_e_atualizar_tudo():
                    # Esta fun√ß√£o interna chama a an√°lise e depois atualiza os gr√°ficos
                    texto_analise, lista_arquivos = eda_agent.analise_completa()
                    caminhos_graficos = eda_agent.obter_graficos_recentes()
                    return texto_analise, lista_arquivos, caminhos_graficos

                analise_btn.click(
                    fn=executar_e_atualizar_tudo,
                    outputs=[resultado_analise, arquivos_gerados_lista, galeria_graficos]
                )
            
            # Tab 3: Perguntas Espec√≠ficas
            with gr.TabItem("‚ùì Perguntas Espec√≠ficas"):
    
                gr.Markdown("## üí¨ Fa√ßa Perguntas sobre os Dados")
                
                # O √∫nico bloco de pergunta, na parte superior
                with gr.Row():
                    pergunta_input = gr.Textbox(
                        label="Digite sua pergunta",
                        placeholder="Fa√ßa uma pergunta espec√≠fica sobre o dataset...",
                        lines=2,
                        scale=4
                    )
                    pergunta_btn = gr.Button("üîç Analisar", variant="primary", scale=1)

                # A estrutura de duas colunas para a resposta e os gr√°ficos
                with gr.Row():
                    with gr.Column(scale=2):
                        resposta_output = gr.Markdown(
                            label="Resposta"
                        )
                    
                    with gr.Column(scale=1):
                        galeria_perguntas = gr.Gallery(
                            label="Gr√°ficos Gerados",
                            show_label=True,
                            elem_id="galeria_perguntas",
                            columns=1,
                            height="auto"
                        )

                # A l√≥gica correta do bot√£o
                def responder_e_atualizar_graficos(pergunta):
                    texto_resposta = eda_agent.pergunta_especifica(pergunta)
                    caminhos_graficos = eda_agent.obter_graficos_recentes()
                    return texto_resposta, caminhos_graficos

                pergunta_btn.click(
                    fn=responder_e_atualizar_graficos,
                    inputs=[pergunta_input],
                    outputs=[resposta_output, galeria_perguntas]
                )
                                       
                    
        # Rodap√©
        gr.HTML("""
        <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: linear-gradient(90deg, #667eea 0%, #764ba2 100%); border-radius: 10px;">
            <p><strong>üîç Agente EDA v1.0</strong></p>
            <p>Desenvolvido por <strong>Eric Bueno</strong></p>
            <p>Powered by <strong>Agno + Google Gemini + Gradio</strong></p>
            <p><em>An√°lise Explorat√≥ria de Dados nunca foi t√£o f√°cil!</em></p>
        </div>
        """)
    
    # --- L√ìGICA DO BOT√ÉO DE LIMPAR SESS√ÉO ---
        todos_os_outputs = [
            info_output, preview_output, colunas_output, 
            resultado_analise, arquivos_gerados_lista, galeria_graficos,
            resposta_output, galeria_perguntas,
            arquivo_input, pergunta_input
        ]
        
        limpar_btn.click(
            fn=eda_agent.limpar_sessao,
            inputs=None,
            outputs=todos_os_outputs
        )

    return interface
"""
# Configura√ß√£o do AgentOS (opcional)
def create_agent_os() -> AgentOS:
# Cria e configura o AgentOS
    
    agent_os = AgentOS(
        name="EDA Agent OS - Gradio + Gemini",
        description="Sistema de An√°lise Explorat√≥ria de Dados para CSV usando Google Gemini e Gradio",
        agents=[eda_agent.agent],
        interfaces=[AGUI(agent=eda_agent.agent)],
        db=eda_agent.db
    )
    
    return agent_os
"""
# Fun√ß√£o principal
def main():
    """Fun√ß√£o principal para executar a aplica√ß√£o"""
    
    # Verificar API Key
    if not os.getenv("GOOGLE_API_KEY"):
        print("‚ö†Ô∏è  GOOGLE_API_KEY n√£o configurada!")
        print("üí° Configure com: export GOOGLE_API_KEY=sua_chave_aqui")
        print("üîó Obtenha sua chave em: https://ai.google.dev/gemini-api/docs/api-key")
        return
    
    print("üöÄ Iniciando Agente EDA com Gradio...")
    print("üîç Interface: Gradio")
    print("ü§ñ LLM: Google Gemini")
    print("‚ö° Framework: Agno")
    
    # Criar e lan√ßar interface
    interface = criar_interface()
    
    # Lan√ßar aplica√ß√£o
    interface.launch(
        server_name="0.0.0.0",  # Permite acesso externo
        server_port=7860,       # Porta padr√£o do Gradio
        share=False,            # N√£o criar link p√∫blico por padr√£o
        debug=True,             # Modo debug
        show_error=True,        # Mostrar erros
        quiet=False             # N√£o silenciar logs
    )

if __name__ == "__main__":
    main()